photo-video-app-backend/
├── config/
│   └── db.js
├── controllers/
│   ├── authController.js
│   ├── postController.js
│   └── treeController.js
├── middleware/
│   └── authMiddleware.js
├── models/
│   ├── Post.js
│   ├── Tree.js
│   └── User.js
├── routes/
│   ├── authRoutes.js
│   ├── postRoutes.js
│   └── treeRoutes.js
├── .env
├── server.js
└── package.json
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const authRoutes = require('./routes/authRoutes');
const postRoutes = require('./routes/postRoutes');
const treeRoutes = require('./routes/treeRoutes');

dotenv.config();

const app = express();
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/trees', treeRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  trees: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Tree' }],
});

module.exports = mongoose.model('User', userSchema);
const mongoose = require('mongoose');

const treeSchema = new mongoose.Schema({
  type: { type: String, required: true },
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Tree', treeSchema);
const mongoose = require('mongoose');

const postSchema = new mongoose.Schema({
  caption: String,
  image: String,
  video: String,
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Post', postSchema);
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

exports.register = async (req, res) => {
  const { name, email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 12);

  const user = new User({
    name,
    email,
    password: hashedPassword,
  });

  await user.save();
  res.status(201).json({ message: 'User registered successfully' });
};

exports.login = async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });

  if (!user) return res.status(400).json({ message: 'Invalid email or password' });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ message: 'Invalid email or password' });

  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token, userId: user._id });
};
const Tree = require('../models/Tree');
const User = require('../models/User');

exports.growTree = async (req, res) => {
  const { type } = req.body;
  const tree = new Tree({ type, user: req.userId });
  await tree.save();

  const user = await User.findById(req.userId);
  user.trees.push(tree);
  await user.save();

  res.status(201).json({ message: 'Tree grown successfully' });
};

exports.getTrees = async (req, res) => {
  const trees = await Tree.find({ user: req.userId });
  res.json(trees);
};
const Post = require('../models/Post');

exports.createPost = async (req, res) => {
  const { caption, image, video } = req.body;
  const post = new Post({ caption, image, video, user: req.userId });
  await post.save();
  res.status(201).json({ message: 'Post created successfully' });
};

exports.getPosts = async (req, res) => {
  const posts = await Post.find().populate('user');
  res.json(posts);
};
const express = require('express');
const { register, login } = require('../controllers/authController');

const router = express.Router();

router.post('/register', register);
router.post('/login', login);

module.exports = router;
const express = require('express');
const { growTree, getTrees } = require('../controllers/treeController');
const authMiddleware = require('../middleware/authMiddleware');

const router = express.Router();

router.post('/grow', authMiddleware, growTree);
router.get('/', authMiddleware, getTrees);

module.exports = router;
const express = require('express');
const { createPost, getPosts } = require('../controllers/postController');
const authMiddleware = require('../middleware/authMiddleware');

const router = express.Router();

router.post('/', authMiddleware, createPost);
router.get('/', getPosts);

module.exports = router;
const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
  const token = req.header('Authorization');
  if (!token) return res.status(401).json({ message: 'No token, authorization denied' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = decoded.userId;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};
photo-video-app-frontend/
├── public/
│   ├── index.html
├── src/
│   ├── api.js
│   ├── App.js
│   ├── index.js
│   ├── components/
│   │   ├── Navbar.js
│   ├── pages/
│   │   ├── Home.js
│   │   ├── Login.js
│   │   ├── Register.js
│   │   └── GrowTree.js
├── package.json
import axios from 'axios';

const API = axios.create({ baseURL: 'http://localhost:5000/api' });

export default API;
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Navbar from './components/Navbar';
import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import GrowTree from './pages/GrowTree';
import './App.css';

function App() {
  return (
    <Router>
      <Navbar />
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/login" component={Login} />
        <Route path="/register" component={Register} />
        <Route path="/grow-tree" component={GrowTree} />
      </Switch>
    </Router>
  );
}

export default App;
import React from 'react';
import { Link } from 'react-router-dom';

const Navbar = () => {
  return (
    <nav>
      <h1>Home Easy Tree</h1>
      <ul>
        <li><Link to="/">Home</Link></li>
        <li><Link to="/grow-tree">Grow Tree</Link></li>
        <li><Link to="/login">Login</Link></li>
        <li><Link to="/register">Register</Link></li>
      </ul>
    </nav>
  );
};

export default Navbar;
import React, { useEffect, useState } from 'react';
import API from '../api';

const Home = () => {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    const fetchPosts = async
